///////////////////////////////////////////////////////////

#region Header

//  ASTMSerial.cs
//  Implementation of the Class ASTMSerial
//  Generated by Enterprise Architect
//  Created on:      12-Apr-2016 4:58:36 PM
//  Original author: Administrator
// singleton design pattern
//

#endregion Header


///////////////////////////////////////////////////////////

namespace ASTM.IO
{
    using System;
    using System.Collections.Generic;
    using System.Data.OracleClient;
    using System.Data.SqlServerCe;
    using System.IO;
    using System.IO.Ports;
    using System.Threading;
    using System.Windows.Forms;

    using ASTM.ASTMInterface;

   // using ASTMConfig;
    using ASTM.SQL;

    //using ASTMDatabase;

    public class ASTMSerial : ASTMIOHelper
    {
        #region Fields

        const int cihazId = 2;
        const int wait = 3000;

        private static ASTMSerial astmSerial = null;
        static bool orderFlag = false;
        static EventWaitHandle wh;
        private static int _barcode;

        private SerialPort serialPort;

        #endregion Fields

        #region Constructors

        public ASTMSerial()
        {
        }

        ~ASTMSerial()
        {
        }

        #endregion Constructors

        #region Methods

        public static ASTMIOHelper New()
        {
            if (astmSerial == null)
                return new ASTMSerial();
            return astmSerial;
        }

        public override void close()
        {
            if (serialPort != null &&serialPort.IsOpen)
            {
                serialPort.DataReceived -= new SerialDataReceivedEventHandler(sp_DataReceived);
                serialPort.Close();
                serialPort.Dispose();
            }
        }
        public SerialPort setSerialPort()
        {
            return new SerialPort(ASTMGlobal.getValue("PortName"),
                int.Parse(ASTMGlobal.getValue("baudRate")),
                (Parity)Enum.Parse(typeof(Parity), ASTMGlobal.getValue("parity")),
                int.Parse(ASTMGlobal.getValue("dataBits")),
                (StopBits)Enum.Parse(typeof(StopBits),
                ASTMGlobal.getValue("stopBits")));
        }
        public int checkPortUser()
        {
            if (serialPort.IsOpen)
                return 1;
            return 0;
        }
        public override int checkUsePort()
        {
            if (serialPort.IsOpen)
            {
                return 1;

            }
            return 0;
        }
        public override void connect()
        {
            using (serialPort = setSerialPort())
            {
              
                //Console.ReadKey();
            }
        }
        public override string getInfomationDevice()
        {
            return serialPort.PortName;
        }
        public override void start()
        {
            if (checkUsePort() == 0)
            {
                serialPort.DataReceived += new SerialDataReceivedEventHandler(sp_DataReceived);

                serialPort.Open();
            }

        }

        public override void connectDB()
        {

            _helpSQL.connect();
        }

        public override string display(string received)
        {
            return base.display(received);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        public override void recived()
        {
        }

        public void selectAllOrder()
        {
            SQLCompact order = SQLCompact.New() as SQLCompact;
            object obj = order.selectALL();
        }

        public override void send()
        {
        }

        /// <summary>
        /// function write data
        /// </summary>
        public void SerialWrite()
        {
            //wh = new AutoResetEvent(false);
            //ASTMMessage m = new ASTMMessage(_barcode);
            //string sql = "select C.CIHAZ_TEST from CHZ_ORDER O, CHZ_TEST C where O.TUBE_BARCODE=" +
            //    _barcode.ToString() + "and C.CIHAZ_ID=" + cihazId + "and C.LIS_TEST=O.LIS_TEST and O.PENDING='P'";
            //SqlCeCommand cmd = new SqlCeCommand(sql, conn);
            //List<string> tests = new List<string>();
            //SqlCeDataReader read;
            //try
            //{
            //    conn.Open();
            //    read = cmd.ExecuteReader();
            //    while (read.Read())
            //    {
            //        tests.Add(read[0].ToString());
            //    }
            //}
            //catch (SqlCeException OEx)
            //{
            //    Console.WriteLine(OEx.Message);
            //}
            //finally
            //{
            //    conn.Close();
            //    cmd.Dispose();
            //}

            //string[] send = m.SendOrder(tests);

            //for (int i = 0; i < send.Length; i++)
            //{
            //    serialPort.Write(send[i]);
            //    wh.WaitOne();
            //}

            //Console.WriteLine("[Host ~]$ ordered: {0}", "tests");
        }

        public void sp_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            SerialPort port = (SerialPort)sender;
           
            string str = serialPort.ReadExisting();
            Eval(str);
        }

        // The bulk of the clean-up code is implemented in Dispose(bool)
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                // free managed resources
                if (serialPort != null)
                {
                    serialPort.Dispose();
                    serialPort = null;
                }
            }
            // free native resources if there are any.
        }

        private static void Update(int _barcode, string test, string result, string resultUnit)
        {
            //    Console.WriteLine("[Host ~]$ Update " + _barcode.ToString() + " " + test + " = " + result + " " + resultUnit);

            //    string sql = "update CHZ_ORDER set PENDING= 'C', RESULT= '" + result +
            //        "' , RESULT_UNIT= '" + resultUnit +
            //        "' , RESULT_DATE= CURRENT_TIMESTAMP, CIHAZ_ID= " + cihazId.ToString() +
            //        " where TUBE_BARCODE= " + _barcode.ToString() +
            //        " and LIS_TEST=(select LIS_TEST from CHZ_TEST where CIHAZ_TEST= '" + test +
            //        "' and CIHAZ_ID= " + cihazId.ToString() + ")";

            //    SqlCeCommand cmd = new SqlCeCommand(sql, conn);

            //    try
            //    {
            //        conn.Open();
            //        cmd.ExecuteNonQuery();

            //    }

            //    catch (OracleException OEx)
            //    {
            //        Console.WriteLine(OEx.Message);
            //    }
            //    finally
            //    {
            //        conn.Close();
            //        cmd.Dispose();
            //    }
        }

        private void ACK()
        {
            Thread.Sleep(wait);
            serialPort.Write(ASTMMessage.ack);
        }

        public override void Eval(string str)
        {
           // results.Add(str);

            string received;

            Thread thread;

            received = null;

            received = str;

            Console.WriteLine("[received]" + display(received));

            if (received == ASTMMessage.ack)
            {
                wh.Set();

            }
            else if (received == ASTMMessage.enq)
            {
                ACK();
            }

            else if (received == ASTMMessage.eot)
            {
                if (orderFlag)
                {
                    thread = new Thread(new ThreadStart(SerialWrite));
                    thread.Start();
                    orderFlag = false;
                    Console.WriteLine("[Host ~]$ Analyzer Queries {0}", _barcode);
                    Console.WriteLine("[Host ~]$ Retrieving {0} tests from LIS", _barcode);
                }
            }
            else
            {
                try
                {

                    string recordType = received[2].ToString();

                    switch (recordType)
                    {
                        case "H":
                            ACK();
                            break;
                        case "Q":
                            string[] fields = received.Split('|');
                            string[] comps = fields[2].Split('^');
                            string barcode = comps[1];
                            _barcode = Convert.ToInt32(barcode);
                            orderFlag = true;
                            ACK();
                            break;
                        case "R":
                            string test = "";
                            string result = "";
                            string resultUnit = "";
                            test = received.Split('|').GetValue(2).ToString();
                            result = received.Split('|').GetValue(3).ToString();
                            resultUnit = received.Split('|').GetValue(4).ToString();
                            Update(_barcode, test, result, resultUnit);
                            ACK();
                            break;
                        case "O":
                            _barcode = Convert.ToInt32(received.Split('|').GetValue(2).ToString());
                            ACK();
                            break;
                        case "L":
                            ACK();
                            break;
                        default:
                            ACK();
                            break;
                    }
                }
                catch (Exception ex)
                {
                    throw new ASTMExeption(ex.Message, ex);

                }
                this.Save(received);
            }
        }

        #endregion Methods

        #region Other

        // Dispose() calls Dispose(true)

        #endregion Other
    }
}