namespace ASTM.IO
{
    ///////////////////////////////////////////////////////////
    //  ASTMHelper.cs
    //  Implementation of the Class ASTMHelper
    //  Generated by Enterprise Architect
    //  Created on:      12-Apr-2016 4:58:06 PM
    //  Original author: Administrator
    ///////////////////////////////////////////////////////////
    using System;
    using System.Collections.Generic;
    using System.IO.Ports;
    using System.Text;
    using System.Threading;
    using System.Windows.Forms;

    using ASTM.ASTMInterface;
    using ASTM.SQL;
    using System.IO;
   // using ASTMDatabase;

    public abstract class ASTMIOHelper
    {
        #region Fields

        public List<string> results = new List<string>();
        public string LabName = "";
        public string PortName = "";
        public string fileSaveName = "";
        public string fileType = "";
        public string file = "";
        public string pathString = "";
        protected string[] LowNames = 
        {
                "<NUL>", "<SOH>", "<STX>", "<ETX>", "<EOT>", "<ENQ>", "<ACK>", "<BEL>",
                "<BS>" , "<HT>" , "<LF>" , "<VT>" , "<FF>" , "<CR>" , "<SO>" , "<SI>",
                "<DLE>", "<DC1>", "<DC2>", "<DC3>", "<DC4>", "<NAK>", "<SYN>", "<ETB>",
                "<CAN>", "<EM>" , "<SUB>", "<ESC>", "<FS>" , "<GS>" , "<RS>" , "<US>"
        };

        protected static IResultType _strategy;
        protected static DataAccessHelper _helpSQL;
        #endregion Fields

        #region Constructors

        public ASTMIOHelper()
        {
            this.PortName = ASTMGlobal.getValue("PortName");
            this.LabName = ASTMGlobal.getValue("LabName");
            this.fileType = ASTMGlobal.getValue("FileType");
            fileSaveName = (LabName + "_" + PortName)+"_" + DateTime.Today.ToString("dd_MM_yyyy");
            file = fileSaveName + fileType;
        }
        public void Save(String str)
        {
            File.AppendAllText(this.file, string.Format("{0}{1}", str, Environment.NewLine));
            Console.WriteLine(this.file + "/" + str);

        }
        ~ASTMIOHelper()
        {
        }

        #endregion Constructors

        #region Methods

        public virtual void close()
        {
        }

        public virtual void connect()
        {
        }
        public virtual void start()
        {


        }
        public virtual void connectDB()
        {
            _helpSQL.connect();

        }
        public virtual void Eval(string str)
        {

        }
        public virtual string display(string received)
        {
            string display = null;

            foreach (char c in received)
            {
                if (c < 32)
                {
                    display += LowNames[c];
                }
                else
                {
                    display += c;
                }
            }

            return display;
        }

        public virtual void Dispose()
        {
            _helpSQL.close();
            
        }
        public virtual string getInfomationDevice()
        {
            return null;

        }
        public virtual Object getResult()
        {
            return _strategy.getResult(results);
        }

        /// <summary>
        /// singleton design pattern
        /// </summary>
        /// <param name="help"></param>
        /// <returns></returns>
        public virtual ASTMIOHelper New(ASTMIOHelper help)
        {
            return help;
        }

        public virtual void recived()
        {
        }

        public virtual void send()
        {
        }
        public void setResultType(IResultType strategy)
        {
            _strategy = strategy;
        }
        public void setSQLType(DataAccessHelper helpSQL)
        {
            _helpSQL = helpSQL;
        }
        public  virtual int checkUsePort()
        {
            return 0;
        }
        #endregion Methods
    }
}